Short Term
==========


We need a more flexible requirement structure.
   Look at the Tennis scorer for an example. Under the 'Wins if...' it would be nice to group the left won and the right won.
   Plus if we don't want a use case, we shouldn't need one
   
BUGS: Usecase references not visible 
Minor tweak to live website: try website has a link. the decision view on live is lying

 
Legacy website

Nested Engines


Medium term
==========
Document driven view of the website





Consider
========
I want to be able to use partial functions with bindings:
   case x: X => "is OK"  as the combination because and code.
   I think this is a precursor to effective multiple trues 
  

Done
Sort out the CDD website so that it points to the Wiki
Have a live website serving up the code. This would allow AutoTdd to sort itself out
Ensure we deal with titles - duplicates, too long... etc
Ensure the examples look really good 
XML situation print out
Decision tree slightly nicer
Usecase command should do title and description at the same time.. probably for the scenario as well
  