Project website http://www.constraintdrivendevelopment.com 

CddCore is written in Scala, although the functions it creates can be called from any language on the JVM

CddCore is a Constraint Driven Development library that defines functions that can be called the same as any other function. Instead of using procedural code, or functional composition to define their behaviour declarative constraints are used.

This is a new style of programming, which differs dramatically in style and effects to both object orientation and functional programming, although it is compatible with both.

The best way to get hold of the code is via Maven. The website_2.10 artefact comes with the reporting tools, which are recommended when you first start. The webpage http://www.autotdd.com/wiki/GettingStarted explains how to get your first project going, but if you want to just try yourself, the Maven dependency is:

<dependency>
   <groupId>org.cddcore</groupId>
   <artifactId>website_2.10</artifactId>
   <version>1.7.1</version>
</dependency>

To demonstrate the use of this project, this is the same problem that is used to demonstrate jboss brms http://www.schabell.org/2013/01/jboss-brms-customer-evaluation-demo-update.html 

The following presentation explains what the code means: https://docs.google.com/presentation/d/181A9ohN_J7kgtDO7QQZKaal4hfqjaEjtZFotwiHkY2Y/pub?start=false&loop=false&delayms=3000#slide=id.p

	case class Person(savings: GBP, ageInYears: Int) {
	  lazy val hasEnoughSavings = savings >= 1000
	  lazy val tooYoung = ageInYears < 16
	}

	@RunWith(classOf[CddJunitRunner])
	object CategorisePerson {
	  import GBP._
	  val categorise = Engine[Person, String]().
		withDescription("This engine works out what category of customer you are").
		withDefaultCode((p: Person) => throw new IllegalStateException).

		useCase("Young people are not eligible").expected("person.child").
		   scenario(Person(savings = 10000, ageInYears = 10), "Child aged 10").
		   because((p: Person) => p.tooYoung).
		   scenario(Person(savings = 10000, ageInYears = 15), "Child aged 15").
		useCase("Poor people").expected("person.poor").
		   scenario(Person(savings = 50, ageInYears = 20), "Very poor person").
		      because((p: Person) => (!p.hasEnoughSavings)).
		   scenario(Person(savings = 999, ageInYears = 20), "Only just poor person").
		useCase("Rich people").expected("person.rich").
		   scenario(Person(savings = 1050, ageInYears = 20), "Rich person").
		   because((p: Person) => p.hasEnoughSavings).
		build
      
	  def main(args: Array[String]) {
         val result = categorise(Person(40, 100))
		 println(result)
      }
	}
	
